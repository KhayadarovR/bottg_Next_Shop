from asyncio import sleep

from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import sqlite_db
from import_help import dp, bot


class FSMadd(StatesGroup):
    product = State()
    photo = State()
    name = State()
    descriptions = State()
    serv = State()
    price = State()
    from_user = State()


class FSMread(StatesGroup):
    prod_type = State()
    p_max = State()
    p_min = State()
    serv = State()


class FSMget(StatesGroup):
    username = State()
    contact = State()


"""****************************** –ê–ù–¢–ò–§–õ–£–î ***************************"""


async def anti_flood(*args, **kwargs):
    m = args[0]
    try:
        await m.answer("–ü–æ–æ–±–µ—â–∞–π –Ω–µ —Ñ–ª—É–¥–∏—Ç—å –∏ –Ω–∞–∂–º–∏ /menu", reply_markup=types.ReplyKeyboardRemove())
    except:
        await m.answer("–ë—É–¥–µ—à—å —Ñ–ª—É–¥–∏—Ç—å - —è –Ω–∞—á–Ω—É –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å:)")
    await sleep(2)


"""*****************–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –µ—Å–ª–∏ —á–µ–ª –∏–∑–º–∏–Ω–∏–ª —é–∑–µ—Ä–Ω–µ–π–º************* –û–¢–í–ï–¢–´ –ù–ê –°–¢–ê–†–¢ –ò –ú–ï–ù–Æ***************************"""



# @dp.message_handler()
@dp.throttled(anti_flood, rate=3)
async def start_menu(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer(f'üëã –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –≤–µ—â–∏ –∏–∑ –∏–≥—Ä—ã NextRP!\n–ù–∞–∂–º–∏ *–º–µ–Ω—é*,'
                     f' —á—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—Éüëá',
                     reply_markup=main_menu, parse_mode=types.ParseMode.MARKDOWN)
    u_name = msg.from_user.username
    user = (str(msg.from_user.id), str(u_name))
    await sqlite_db.add_idname(user)


@dp.throttled(anti_flood, rate=2)
async def exit(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('Ok, –∑–∞–±—ã–ª–∏ –≤—Å—ë! –í—ã –≤ –º–µ–Ω—é üè†\n\n'
                     '*/–∫—É–ø–∏—Ç—å* -  –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n'
                     '*/–ø—Ä–æ–¥–∞—Ç—å* - –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n'
                     '*/–∫–æ–Ω—Ç–∞–∫—Ç—ã* - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\n'
                     '*/–æ–±—ä—è–≤–ª–µ–Ω–∏—è* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n'
                     '*/–º–µ–Ω—é* - –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é',
                     reply_markup=main_menu, parse_mode=types.ParseMode.MARKDOWN)


"""****************************** –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –í–´–°–¢–ê–í–ö–ò –°–í–û–ï–ì–û –¢–û–í–ê–†–ê***************************"""


@dp.throttled(anti_flood, rate=3)
async def start_sell(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    user_contact = await sqlite_db.read_contact(str(user_id))
    if (user_contact[0])[1] is None or (user_contact[0])[0] is None or msg.from_user.username is None:
        await msg.answer('‚ùó–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n'
                         '–ù–∞–∂–º–∏—Ç–µ */–∫–æ–Ω—Ç–∞–∫—Ç—ã* –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ, —á—Ç–æ –±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Å–º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏',
                         parse_mode=types.ParseMode.MARKDOWN)
    else:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞\n'
                         '\n1 - üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n'
                         '\n2 - üèò –ù–µ–¥–≤–∏–∂–µ–º–æ—Å—Ç—å\n'
                         '\n3 - üí∞ –ë–∏–∑–Ω–µ—Å', reply_markup=products)
        await FSMadd.product.set()


async def chose_product(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product'] = msg.text
    await msg.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=kb_exit)
    await FSMadd.next()


async def set_photo(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = msg.photo[0].file_id
    await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞')
    await FSMadd.next()


async def set_name(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = msg.text
    await msg.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞')
    await FSMadd.next()


async def set_descriptions(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['descriptions'] = msg.text
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ü–†–û–î–ê–¢–¨ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä:'
                     '\n1 - C–æ–≤–µ—Ç—Å–∫–∏–π‚öí'
                     '\n2 - –ë–∞–ª—Ç–∏–π—Å–∫–∏–π‚õµ'
                     '\n3 - –ö–∞–≤–∫–∞–∑—Å–∫–∏–πüóª'
                     '\n4 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–πüëë'
                     '\n5 - –°–∏–±—Ä—Å–∫–∏–π‚ùÑ'
                     '\n6 - –ü—Ä–∏–º–æ—Ä—Å–∫–∏–πüåä'
                     '\n7 - –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–πüè¶'
                     '\n8 - –Æ–∂–Ω—ã–πüèù'
                     '\n9 - –£—Ä–∞–ª—å—Å–∫–∏–πüß¢'
                     '\n10 - –ê–ª—Ç–∞–π—Å–∫–∏–πüèû', reply_markup=kb_serv)
    await FSMadd.next()


async def set_serv(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['serv'] = int(msg.text)
            await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 285 000 –∏–ª–∏ 125000)',
                             reply_markup=kb_price)
            await FSMadd.next()
        except:
            await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º!')
            await FSMadd.serv.set()


async def set_price_finish(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['price'] = int(msg.text.replace(' ', ''))
            data['from_user'] = str(msg.from_user.id)
            answer = (tuple(data.values()))
        await bot.send_photo(msg.from_user.id, answer[1], f'*–¢–∏–ø*: {answer[0]}\n'
                                                          f'*–ù–∞–∑–≤–∞–Ω–∏–µ:* {answer[2]}\n'
                                                          f'*–û–ø–∏—Å–∞–Ω–∏–µ:* {answer[3]}\n'
                                                          f'*–¶–µ–Ω–∞:* {answer[-2]:,}',
                             parse_mode=types.ParseMode.MARKDOWN)
        await sqlite_db.add_product(state)
        await msg.answer('‚úî –°–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É...\n‚è∞–ñ–¥–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º',
                         reply_markup=main_menu)
        await state.finish()
    except:
        await msg.answer('‚ùå–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à —Ç–æ–≤–∞—Ä! –í—ã –∫–∞–∫ —Ç–æ —É–º—É–¥—Ä–∏–ª–∏—Å—å –æ—à–∏–±–∏—Ç—å—Å—è –¥–∞–∂–µ —Ç—É—Çü§¶‚Äç‚ôÇÔ∏è'
                         '\n\n–ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æüòä', reply_markup=main_menu)
        await state.finish()


"""****************************** –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –°–ë–û–†–ê –£–°–õ–û–í–ò–ô –ü–û–ò–°–ö–ê***************************"""


@dp.throttled(anti_flood, rate=3)
async def start_buy(msg: types.Message):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞\n'
                     '\n1 - üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n'
                     '\n2 - üèò –ù–µ–¥–≤–∏–∂–µ–º–æ—Å—Ç—å\n'
                     '\n3 - üí∞ –ë–∏–∑–Ω–µ—Å', reply_markup=products)
    await FSMread.prod_type.set()


async def set_prodtype(msg: types.Message, state: FSMContext):
    async with state.proxy() as search_data:
        search_data['prod_type'] = msg.text
    await msg.answer('–ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–∏—Ä–∏ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É:', reply_markup=kb_price)
    await FSMread.next()


async def set_pmax(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as search_data:
            search_data['p_max'] = int(msg.text.replace(' ', ''))
        await msg.answer('–í—ã–±–µ—Ä–∏ –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É:', reply_markup=kb_minprice)
        await FSMread.next()
    except:
        await msg.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ\–≤—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ù–∞–ø—Ä–∏–º–µ—Ä 50 000 –∏–ª–∏ 200000\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã/–∑–∞–ø—è—Ç—ã–µ/—Ç–æ—á–∫–∏')
        await FSMread.p_max.set()


async def set_pmin(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as search_data:
            search_data['p_min'] = int(msg.text.replace(' ', ''))
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ö–£–ü–ò–¢–¨ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä:'
                         '\n1 - C–æ–≤–µ—Ç—Å–∫–∏–π‚öí'
                         '\n2 - –ë–∞–ª—Ç–∏–π—Å–∫–∏–π‚õµ'
                         '\n3 - –ö–∞–≤–∫–∞–∑—Å–∫–∏–πüóª'
                         '\n4 - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–πüëë'
                         '\n5 - –°–∏–±—Ä—Å–∫–∏–π‚ùÑ'
                         '\n6 - –ü—Ä–∏–º–æ—Ä—Å–∫–∏–πüåä'
                         '\n7 - –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–πüè¶'
                         '\n8 - –Æ–∂–Ω—ã–πüèù'
                         '\n9 - –£—Ä–∞–ª—å—Å–∫–∏–πüß¢'
                         '\n10 - –ê–ª—Ç–∞–π—Å–∫–∏–πüèû', reply_markup=kb_serv)
        await FSMread.next()
    except:
        await msg.answer(
            '–ù–∞–ø–∏—à–∏—Ç–µ\–≤—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ù–∞–ø—Ä–∏–º–µ—Ä 50 000 –∏–ª–∏ 200000\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã/–∑–∞–ø—è—Ç—ã–µ/—Ç–æ—á–∫–∏')
        await FSMread.p_min.set()


async def set_readserv(msg: types.Message, state: FSMContext):
    try:
        async with state.proxy() as search_data:
            search_data['serv'] = int(msg.text.replace(' ', ''))
            conditions = tuple(search_data.values())
        await msg.answer(f'*–£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞*\n\n–¢–∏–ø: {conditions[0]}\n–¶–µ–Ω–∞ —Å {conditions[2]:,} –¥–æ {conditions[1]:,}'
                         f'\n–°–µ—Ä–≤–µ—Ä: {conditions[-1]}', reply_markup=main_menu, parse_mode=types.ParseMode.MARKDOWN)
        await sqlite_db.read_products(msg, conditions[0], int(conditions[2]), int(conditions[1]), int(conditions[-1]))
        await state.finish()
    except:
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º!')
        await FSMread.serv.set()


"""****************************** –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –î–õ–Ø –°–ë–û–†–ê –ö–û–ù–¢–ê–ö–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ***************************"""


@dp.throttled(anti_flood, rate=5)
async def start_getcontact(msg: types.Message):
    user_id = msg.from_user.id
    user_contact = await sqlite_db.read_contact(str(user_id))
    if not user_contact:
        await msg.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', reply_markup=main_menu)
    await bot.send_message(msg.from_user.id, f'–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n'
                                             f'*Telegram:* @{(user_contact[0])[1]}\n*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n'
                                             f'{(user_contact[0])[0]}', parse_mode=types.ParseMode.MARKDOWN)

    if msg.from_user.username is None:
        await msg.answer(
            "1Ô∏è‚É£‚Äº–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π @username –≤ –Ω–∞—Å—Ç—Ä–æ–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—Ç–µ /start\n\n"
            "–ù–∞–∂–º–∏—Ç–µ */–º–µ–Ω—é* —á—Ç–æ –±—ã –≤—ã–π—Ç–∏", parse_mode=types.ParseMode.MARKDOWN, reply_markup=kb_exit)
    else:
        await msg.answer(
            '*–û—Ç–ø—Ä–∞–≤—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —á—Ç–æ –±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ —Å–≤–∑—è–∞—Ç—å—Å—è —Å –≤–∞–º–∏*\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–∞—à –Ω–∏–∫, —Å–≤–æ–π discord, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∫, –∫–æ–≥–¥–∞ '
            '–≤—ã—Ö–æ–¥–∏—Ç–µ –≤ –æ–Ω–ª–∞–π–Ω –∏ —Ç.–¥\n\n–ù–∞–∂–º–∏—Ç–µ *–º–µ–Ω—é* —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ (—Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)',
            parse_mode=types.ParseMode.MARKDOWN, reply_markup=kb_exit)
        await FSMget.contact.set()


async def set_contact(msg: types.Message, state: FSMContext):
    async with state.proxy() as contact_data:
        contact_data['contact'] = msg.text
        contact_data['u_name'] = msg.from_user.username
        contact_data['u_id'] = str(msg.from_user.id)
        user_tg = contact_data['u_name']
    await sqlite_db.add_contact(state)
    await msg.answer(f'–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n*Telegram:* @{user_tg}\n*–°–≤—è–∑—å —Å –≤–∞–º–∏:*\n{msg.text}',
                     parse_mode=types.ParseMode.MARKDOWN)
    await msg.answer('‚úÖ–°–æ—Ö—Ä–∞–Ω–∏–ª...', reply_markup=main_menu)
    await state.finish()


"""****************************** –û–ë–†–û–ë–û–¢–ö–ê CALLBACK –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê –ü–†–û–î–ê–í–¶–ê ***************************"""


@dp.throttled(anti_flood, rate=3)
async def give_contact(call_query: types.CallbackQuery):
    user_id = call_query.data.split('_')
    user_contact = await sqlite_db.read_contact(str(user_id[1]))
    if not user_contact:
        bot.send_message(call_query.from_user.id, '–ö–æ–Ω—Ç–∞–∫—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã', reply_markup=main_menu)
    else:
        await bot.send_message(call_query.from_user.id, f'*Telegram –ø—Ä–æ–¥–æ–≤—Ü–∞:* @{(user_contact[0])[1]}\n*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n'
                                                        f'{(user_contact[0])[0]}', parse_mode=types.ParseMode.MARKDOWN)
        await call_query.answer(f'–û—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞!')


"""****************************** –û–¢–ü–†–ê–í–ö–ê CALLBACK –ù–ê –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ***************************"""


@dp.throttled(anti_flood, rate=5)
async def see_board(msg: types.Message):
    await msg.answer('‚è≥–ò—â—É –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ... _—Å—Ä–µ–¥–∏ –∫—É—á–∏ —Ö–ª–∞–º–∞_', parse_mode=types.ParseMode.MARKDOWN)
    user_id = msg.from_user.id
    rows = await sqlite_db.read_board(str(user_id))
    if not rows:
        await msg.answer('–í–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, '
                         '–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ */–ø—Ä–æ–¥–∞—Ç—å*',
                         reply_markup=main_menu, parse_mode=types.ParseMode.MARKDOWN)
    else:
        for ret in rows:
            il_contact = InlineKeyboardButton(text='üëÜ‚ùå–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ‚ùåüëÜ', callback_data=f'boarddelete_{ret[0]}')
            print(f'send rowid for delete: {il_contact.callback_data}')
            delete_user_board = InlineKeyboardMarkup().add(il_contact)
            await bot.send_photo(msg.from_user.id, ret[2], f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {ret[1]}\n"
                                                           f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {ret[3]}\n"
                                                           f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {ret[4]}\n"
                                                           f"*–°–µ—Ä–≤–µ—Ä:* {ret[5]}\n"
                                                           f"*–¶–µ–Ω–∞:* {ret[6]:,}\n",
                                 parse_mode=types.ParseMode.MARKDOWN, reply_markup=delete_user_board)
            await sleep(3)


"""****************************** –û–ë–†–û–ë–û–¢–ö–ê CALLBACK –ù–ê –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ***************************"""


@dp.throttled(anti_flood, rate=3)
async def delete_board(call_query: types.CallbackQuery):
    boards_rowid = call_query.data.split('_')
    delete_name = await sqlite_db.del_board(int(boards_rowid[1]))
    await call_query.answer(f'{delete_name[0]} —É–¥–∞–ª—ë–Ω!')


"""****************************** –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô *************************************"""


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_menu, commands=['start', 'help'], state='*')
    dp.register_message_handler(exit, state='*', commands=['exit', 'menu'])
    dp.register_message_handler(exit, Text(startswith=['–≤—ã—Ö–æ–¥', '–º–µ–Ω—é']), state='*')
    dp.register_message_handler(start_sell, state=None, commands=['–ø—Ä–æ–¥–∞—Ç—å'])
    dp.register_message_handler(start_buy, state=None, commands=['–∫—É–ø–∏—Ç—å'])
    dp.register_message_handler(see_board, state=None, commands=['–æ–±—ä—è–≤–ª–µ–Ω–∏—è'])
    dp.register_message_handler(start_getcontact, state=None, commands=['–∫–æ–Ω—Ç–∞–∫—Ç—ã'])
    dp.register_message_handler(chose_product, state=FSMadd.product)
    dp.register_message_handler(set_photo, content_types='photo', state=FSMadd.photo)
    dp.register_message_handler(set_name, state=FSMadd.name)
    dp.register_message_handler(set_descriptions, state=FSMadd.descriptions)
    dp.register_message_handler(set_serv, state=FSMadd.serv)
    dp.register_message_handler(set_price_finish, state=FSMadd.price)
    dp.register_message_handler(set_prodtype, state=FSMread.prod_type)
    dp.register_message_handler(set_pmax, state=FSMread.p_max)
    dp.register_message_handler(set_pmin, state=FSMread.p_min)
    dp.register_message_handler(set_readserv, state=FSMread.serv)
    dp.register_message_handler(set_contact, state=FSMget.contact)
    dp.register_callback_query_handler(give_contact, Text(startswith='con_'))
    dp.register_callback_query_handler(delete_board, Text(startswith='boarddelete_'))
